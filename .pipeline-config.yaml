version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf
  script: |
    #!/usr/bin/env bash
    # if [[ "$PIPELINE_DEBUG" == 1 ]]; then
    #   trap env EXIT
    #   env
    #   set -x
    # fi
    # if [[ "$(get_env pipeline_namespace)" == *"pr"* ||  "$(get_env pipeline_namespace)" == *"ci"* ]]; then
    #   source scripts/code_setup.sh
    # fi

test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf
  script: |
    #!/usr/bin/env bash
    
    # source scripts/run_test.sh
    # run_test test com.ibm.unit_tests unit-test-result.xml 1

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    mvn package
    IMAGE=my-spring-boot-sample:1
    docker build . -t "${IMAGE}"
    docker push "${IMAGE}"
    
    DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "${IMAGE}" | awk -F@ '{print $2}')"
    
    save_artifact app-image \
      type=image \
      "name=${IMAGE}" \
      "digest=${DIGEST}" \
      "tags=1"
    
    

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.19@sha256:482d28e51d5acc65471b366bbdcabc97f69e49da933337a7c42f45907cd63173
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    # source scripts/deploy_setup.sh
    # source scripts/deploy.sh

acceptance-test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf
  script: |
    #!/usr/bin/env bash

    # export APP_URL=$(get_env app-url)
    # source scripts/run_test.sh    
    # run_test acceptance-test com.ibm.acceptance_tests acceptance-test-result.xml 0

release:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.19@sha256:482d28e51d5acc65471b366bbdcabc97f69e49da933337a7c42f45907cd63173
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source release.sh

dynamic-scan:
  dind: true
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf
  script: |
    #!/usr/bin/env bash
    # if [ -z "$(get_env opt-in-dynamic-scan "")" ]; then
    #   echo "If you want to enable this stage, add 'opt-in-dynamic-scan' parameter to your pipeline with any value. Also, please add 'opt-in-dynamic-api-scan' to your pipeline with any value to have api scans running, and 'opt-in-dynamic-ui-scan' with any value to have ui scans running" >&2
    # else
    #   if [[ "$(get_env pipeline_namespace)" == *"cc"* ]]; then
    #     app_url=$(get_env app-url "")
    #     if [[ -z "${app_url}" ]]; then
    #       echo "Please provide the app-url as the running application url. Recommended to use stage/test environment to run the Dynamic scan." >&2
    #       exit 1
    #     fi
    #     source scripts/zap/zap-cc-config
    #   fi
    #   source scripts/zap/trigger-async-zap
    # fi

owasp-zap:
  dind: true 
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf
  script: |
    #!/usr/bin/env bash

    # source scripts/zap/trigger_zap_scans
